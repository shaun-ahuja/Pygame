
# Pygame base template for opening a window - MVC version
# Simpson College Computer Science
# http://programarcadegames.com/
#
#https://www.pygame.org/docs/tut/newbieguide.html
#http://programarcadegames.com/index.php?chapter=lab_animation
#https://realpython.com/pygame-a-primer/

## Pygame setup
import pygame
import random
import time
pygame.init()
size = (600, 600)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("How The Grinch Stole Christmas")

## MODEL - Data use in system

present_width = 0
present_height = 0

# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREY = (112, 107, 92)
TURQ = (104, 228, 242)
SKY = (224, 222, 252)
DARK_BLUE = (47, 162, 250)
sceneOneC = (85, 255, 0)

# Point of `View reference
worldSize = [800, 400]
pov = [0, 0]

# Create boolean variables to keep track of arrow key presses
up_pressed = False
down_pressed = False

# create a list to store the candy cane obstacles
candy_cane_list = []

#Lists
snow_list =[]
#
#import the image of the grinch
grinchBG = pygame.image.load("graphics/grinchFaceBG.png")
grinchBG = pygame.transform.scale(grinchBG, (600, 600))
grinchBGPos = [0,0]

#import the image of the grinch standing
grinchStand = pygame.image.load("graphics/TheGrinchStanding.webp")
grinchStand = pygame.transform.scale(grinchStand, (200, 550))
grinchStandPos = [0,0]

#import the background image of scene 2
grinchEscape = pygame.image.load("graphics/HowMustYou.jpeg")
grinchEscape = pygame.transform.scale(grinchEscape, (600, 600))
grinchEscape = grinchEscape.convert()
grinchEscape.set_alpha(50)
grinchEscapePos = [0,0]

#import the image for scene 3
grinchCheeky = pygame.image.load("graphics/ready.webp")
grinchCheeky = pygame.transform.scale(grinchCheeky, (290, 550))
grinchCheekyPos = [0,20]

#import the image for the sleigh as the character
sleigh = pygame.image.load("graphics/sleigh.png")
sleigh = pygame.transform.scale(sleigh, (60, 60))

#import the image for scene 5
grinchEnd = pygame.image.load("graphics/grinchEnd.webp")
grinchEnd = pygame.transform.scale(grinchEnd, (600, 600))
grinchEnd = grinchEnd.convert()
grinchEnd.set_alpha(75)
grinchEndPos = [0,0]

#import the image for the presents falling down
present_image = pygame.image.load("graphics/present.png")
present_image = pygame.transform.scale(present_image, (50, 50))
present_width = present_image.get_width()
present_height = present_image.get_height()
present_list = []

#import the image for background for scene 4
background2 = pygame.image.load("graphics/background2.jpg").convert()
background2 = pygame.transform.scale(background2, (600, 600))

#import the image for the candy cane
candyCane = pygame.image.load("graphics/candycane.png").convert_alpha()
candyCane = pygame.transform.scale(candyCane, (80,80))

#speed in pixels per frame
x_speed = 5
y_speed = 5
present_y_speed = 1
background2_x_speed = 0.5

#speed at which candy canes move
candy_cane_speed = -2

# Variable to keep track of user's score
score = 0

#current position
x_coord = 100
y_coord = 220

#initial position of background2
background2Pos = [0,0]

# define the initial position of the sleigh
sleighPos = [100,100] 

# # Initialize candy canes
for i in range(4):
    candy_cane = [random.randrange(0, worldSize[0]), random.randrange(0, worldSize[1])]
    candy_cane_list.append(candy_cane)

#subprograms here
# Define the function to drop the presents
def update_presents():
    for present in present_list:
        present[1] += present_y_speed

def drop_presents():
    while True:
        x_coord = random.randint(0, screen.get_width() - present_width)
        y_coord = -present_height
        present_list.append([x_coord, y_coord])
        time.sleep(5)

# #function for displaying candy canes
def display_candy_canes():
    for candy_canes in candy_cane_list:
        screen.blit(candyCane, (candy_canes[0], candy_canes[1]))

def sleighPrint():
    screen.blit(sleigh, [x_coord, y_coord])

def presentDraw():
    screen.blit(present_image, present)

def check_present_hit(mouse_pos):
    global score
    for present in present_list:
        if (mouse_pos[0] > present[0] and mouse_pos[0] < present[0] + present_width) and (mouse_pos[1] > present[1] and mouse_pos[1] < present[1] + present_height):
            present_list.remove(present)
            score += 1

def check_collision(sleigh_x, sleigh_y, candy_x, candy_y):
    if sleigh_x > candy_x and sleigh_x < candy_x + candyCane.get_width():
        if sleigh_y > candy_y and sleigh_y < candy_y + candyCane.get_height():
            return True
    return False

def drawScene0():
    # Intro
    screen.blit(grinchBG, grinchBGPos)
    font = pygame.font.SysFont("comicsansms", 30)
    welcomeMsg = font.render("Welcome to The Grinch's Lair!", True, (255, 255, 255))
    continueMsg = font.render("Click to continue", True, (0, 0, 0))
    pygame.draw.rect(screen, sceneOneC, [180,395,240,35])
    screen.blit(welcomeMsg,(158, 325))
    screen.blit(continueMsg,(210, 405))
    snowfall()
    
def drawScene1():
 # Intro
    pygame.draw.rect(screen, BLACK, [0,0,600,600], 0)
    fontOne = pygame.font.SysFont("comicsansms", 37)
    font = pygame.font.SysFont("comicsansms", 30)
    storyFont = pygame.font.SysFont("comicsansms", 30)
    storyInfo = storyFont.render("Help me escape from santas workshop!", True, (255, 255, 255))
    bgInfo = fontOne.render("How Did You Get Here?", True, (255, 255, 255))
    screen.blit(storyInfo,(160, 150))
    screen.blit(bgInfo,(160, 30))
    screen.blit(grinchStand, grinchStandPos)
    continueMsg = font.render("Click to continue", True, (0, 0, 0))
    pygame.draw.rect(screen, sceneOneC, [250,525,240,35])
    screen.blit(continueMsg,(272, 530))
    snowfall()

def drawScene2():
    pygame.draw.rect(screen, BLACK, [0,0,600,600], 0)
    screen.blit(grinchEscape, grinchEscapePos)
    fontOne = pygame.font.SysFont("comicsansms", 40)
    font = pygame.font.SysFont("comicsansms", 30)
    escpTitle = fontOne.render("How Must You Escape?", True, (255, 255, 255))
    screen.blit(escpTitle,(125, 30))
    escpFont = pygame.font.SysFont("comicsansms", 15)
    escpInfo = escpFont.render("Use the Arrow Keys to help me escape, use the UP arrow and the Down Arrow to dodge the defensive candy canes!", True, (255, 255, 255))
    screen.blit(escpInfo,(5, 100))
    continueMsg = font.render("Click to continue", True, (0, 0, 0))
    pygame.draw.rect(screen, WHITE, [180,525,240,35])
    screen.blit(continueMsg, (200,530))
    snowfall()

def drawScene3():
    pygame.draw.rect(screen, BLACK, [0,0,600,600], 0)
    screen.blit(grinchCheeky, grinchCheekyPos)
    fontOne = pygame.font.SysFont("comicsansms", 50)
    startText1 = fontOne.render("Click", True, sceneOneC)
    startText2 = fontOne.render("Anywhere", True, sceneOneC)
    startText3 = fontOne.render("to Start", True, sceneOneC)
    screen.blit(startText1, (385, 200))
    screen.blit(startText2, (335, 260))
    screen.blit(startText3, (360, 320))
    snowfall()

def drawScene4():
    background()
    snowfall()
    sleighPrint()
    presentDraw()
    update_presents()
    sleighPrint()

def drawScene5():
    pygame.draw.rect(screen, BLACK, [0,0,600,600], 0)
    screen.blit(grinchEnd, grinchEndPos)
    fontOne = pygame.font.SysFont("comicsansms", 50)
    endText1 = fontOne.render("YOU DIED", True, WHITE)
    endText2 = fontOne.render("Your score was: " + str(score), True, WHITE)
    screen.blit(endText1, (150, 100))
    screen.blit(endText2, (100, 300))


def background():
    background2Pos[0] += background2_x_speed
    # Wrap the background2 position when it goes offscreen
    background2Pos[0] = background2Pos[0] % background2.get_width()
    background2Pos[1] = background2Pos[1] % background2.get_height()
     # Get the dimensions of the background2
    bg_width, bg_height = background2.get_size()

    # Render multiple copies of the background2
    for i in range(-1, 2):
        for j in range(-1, 2):
            screen.blit(background2, (background2Pos[0] + i * bg_width, background2Pos[1] + j * bg_height))
    for offset in range(0, worldSize[0], 45):
        #bottom spike
        pygame.draw.polygon(screen, DARK_BLUE,[[0+offset-pov[0],600], [50+offset-pov[0],600], [25+offset-pov[0], 550]], 0)
        #top spikes
        pygame.draw.polygon(screen, DARK_BLUE,[[0+offset-pov[0],5], [50+offset-pov[0],5], [25+offset-pov[0],50 ]], 0)
        pygame.draw.rect(screen, BLACK, [0-pov[0],0-pov[1],800, 600], 10)
    # Create a font object
    font = pygame.font.Font(None, 90)
    
    # Render the score as a surface
    score_text = font.render(str(score), True, WHITE)
    
    # Draw the score surface on the screen at position (x, y)
    screen.blit(score_text, (30, 30))
  
def snowfall():
    # Snow fall
    for i in range(len(snow_list)):
        pygame.draw.circle(screen, WHITE, snow_list[i], 3)
        snow_list[i][1] += 1
            # Snow respawn
        if snow_list[i][1] > 600:
            # Snow x vlaue respawn
            snow_x = random.randrange(0, 600)
            snow_list[i][0] = snow_x
                # Snow y value respawn
            snow_y = random.randrange(-50, -10)
            snow_list[i][1] = snow_y

            
# Variable to control which scene we are on
scene = 0

# Start the thread to drop the presents
import threading
threading.Thread(target=drop_presents).start()


#Snow loop in random position
for i in range(50):
    snow_x = random.randrange(0,600)
    snow_y = random.randrange(0,600)
    snow_list.append([snow_x,snow_y])

# Loop until the user clicks the close button.
done = False

## Main Program Loop
while not done:
    ## CONTROL
    # Check for events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        if scene >= 0 and scene < 4:       
            if event.type == pygame.MOUSEBUTTONDOWN:
                scene = scene + 1    
            if event.type == pygame.MOUSEBUTTONDOWN:
                x,y = pygame.mouse.get_pos()
                print(x,y)
        elif event.type == pygame.KEYDOWN:
            if sleighPos[1] < 45 or sleighPos[1] > 530:
                scene = 5
            sleigh_rect = sleigh.get_rect(topleft=sleighPos)
            for candy_x, candy_y in candy_cane_list:
                candy_rect = candyCane.get_rect(topleft = (candy_x, candy_y))
                if sleigh_rect.colliderect(candy_rect):
                    scene = 5
            if event.key == pygame.K_UP:
                up_pressed = True
            elif event.key == pygame.K_DOWN:
                down_pressed = True
        elif event.type == pygame.KEYUP:
            if sleighPos[1] < 45 or sleighPos[1] > 500:
                scene = 5
            sleigh_rect = sleigh.get_rect(topleft=sleighPos)
            for candy_x, candy_y in candy_cane_list:
                candy_rect = candyCane.get_rect(topleft = (candy_x, candy_y))
                if sleigh_rect.colliderect(candy_rect):
                    scene = 5
            if event.key == pygame.K_UP:
                up_pressed = False
                down_pressed = True
            elif event.key == pygame.K_DOWN:
                down_pressed = True
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            check_present_hit(mouse_pos)
    if sleighPos[1] < 0:
        sleighPos[1] = 0
    if sleighPos[1] > 550:
        sleighPos[1] = 550
      

    
    # Move background of scene 4 to the right
    background2Pos[0] -= x_speed
    
    # Redraw the background of scene 4
    screen.blit(background2, background2Pos)


    for present in present_list:
        screen.blit(present_image, (present[0], present[1]))
        present[1] += 5
        if present[1] > screen.get_height():
            present_list.remove(present)
        screen.blit(present_image, (present[0], present[1]))
   
    # Update the y_coord based on whether up or down arrow is pressed
    if up_pressed:
        y_coord -= y_speed
    elif down_pressed:
        y_coord += y_speed

     # Used to manage how fast the screen updates
    clock = pygame.time.Clock()       

    ## VIEW
    if (scene == 0):
        drawScene0()
    elif (scene == 1):
        drawScene1()
    elif (scene == 2):
        drawScene2()
    elif (scene == 3):
        drawScene3()
    elif (scene == 4):
        drawScene4()
        display_candy_canes()
        for i in range(len(candy_cane_list)):
            candy_cane_list[i][0] += candy_cane_speed
            candy_cane_speed += -0.0013
            if candy_cane_list[i][0] < -candyCane.get_width():
                candy_cane_list.pop(i)
                candy_cane = [worldSize[0], random.randrange(0, worldSize[1])]
                candy_cane_list.append(candy_cane)
            screen.blit(candyCane, candy_cane_list[i])
    elif (scene == 5):
        drawScene5()


    

    # Update Screen
    pygame.display.flip()
    clock.tick(60)

# Close the window and quit
pygame.quit()
